{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["// import svgr from '@svgr/core';\nconst fetcher = require('./util/fetcher');\nconst chalk = require('chalk');\nconst fs = require('fs');\nconst spicy = require('spicymkdir');\nconst path = require('path');\nconst camelCase = require('camelcase');\n\nexport function add(a, b) {\n  return a + b;\n}\nasync function getNodes() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const data = await fetcher.getFiles().then((e) => {\n        return e;\n      });\n\n      if (data.nodes['0:1'].document.type !== 'CANVAS' || !data) {\n        reject('Unable to fetch content');\n      }\n\n      const IconCanvas = await data.nodes['0:1'].document;\n\n      // remove non FRAME nodes\n      const content = IconCanvas.children.filter((el) => {\n        return el.type === 'FRAME';\n      });\n\n      if (!content) {\n        reject('Unable to fetch content');\n      }\n      resolve(content);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nfunction mapNodes() {\n  return new Promise((resolve, reject) => {\n    try {\n      getNodes().then((frame) => {\n        console.log(\n          `${chalk.green.bold(`Success`)}: Fetched ${frame.length} frames\\n`\n        );\n        const icons = frame.map((node) => {\n          console.log(\n            `${chalk.bold(node.name)} - ${node.children.length} icons`\n          );\n          const meta = node.children.map((el) => {\n            return {\n              id: el.id,\n              name: camelCase(el.name.split('/')[1].trim()),\n            };\n          });\n          return {\n            category: node.name,\n            icons: [...meta],\n          };\n        });\n        if (!icons) reject(`Unable to process icons name or id`);\n\n        resolve(icons);\n\n        const outputDir = 'figma';\n\n        // this should be taken care of better to avoid version clashing with figma\n        spicy.mkdirSync(outputDir);\n        fs.writeFile(\n          path.join(outputDir, `/icons.json`),\n          JSON.stringify(icons),\n          (err) => {\n            if (err) {\n              console.error(err);\n            }\n          }\n        );\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n// mapNodes();\n\n//test it\nexport function solver(a, b) {\n  return a + b;\n}\n"],"names":[],"mappings":"AAAA;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1C,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACpC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC;AACO,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AA0ED;AACA;AACA;AACA;AACO,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;AAC7B,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AACf;;;;"};;;"}